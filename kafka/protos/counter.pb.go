// Code generated by protoc-gen-go. DO NOT EDIT.
// source: counter.proto

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	counter.proto

It has these top-level messages:
	EventIn
	Empty
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventIn struct {
	Content string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
}

func (m *EventIn) Reset()                    { *m = EventIn{} }
func (m *EventIn) String() string            { return proto.CompactTextString(m) }
func (*EventIn) ProtoMessage()               {}
func (*EventIn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EventIn) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*EventIn)(nil), "protos.EventIn")
	proto.RegisterType((*Empty)(nil), "protos.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EventCount service

type EventCountClient interface {
	Count(ctx context.Context, in *EventIn, opts ...grpc.CallOption) (*Empty, error)
}

type eventCountClient struct {
	cc *grpc.ClientConn
}

func NewEventCountClient(cc *grpc.ClientConn) EventCountClient {
	return &eventCountClient{cc}
}

func (c *eventCountClient) Count(ctx context.Context, in *EventIn, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/protos.EventCount/Count", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EventCount service

type EventCountServer interface {
	Count(context.Context, *EventIn) (*Empty, error)
}

func RegisterEventCountServer(s *grpc.Server, srv EventCountServer) {
	s.RegisterService(&_EventCount_serviceDesc, srv)
}

func _EventCount_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventCountServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.EventCount/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventCountServer).Count(ctx, req.(*EventIn))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventCount_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.EventCount",
	HandlerType: (*EventCountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Count",
			Handler:    _EventCount_Count_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "counter.proto",
}

func init() { proto.RegisterFile("counter.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 116 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xce, 0x2f, 0xcd,
	0x2b, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x03, 0x53, 0xc5, 0x4a, 0xca,
	0x5c, 0xec, 0xae, 0x65, 0xa9, 0x79, 0x25, 0x9e, 0x79, 0x42, 0x12, 0x5c, 0xec, 0xc9, 0xf9, 0x79,
	0x25, 0xa9, 0x79, 0x25, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x30, 0xae, 0x12, 0x3b, 0x17,
	0xab, 0x6b, 0x6e, 0x41, 0x49, 0xa5, 0x91, 0x29, 0x17, 0x17, 0x58, 0xb5, 0x33, 0xc8, 0x2c, 0x21,
	0x75, 0x2e, 0x56, 0x08, 0x83, 0x1f, 0x62, 0x68, 0xb1, 0x1e, 0xd4, 0x28, 0x29, 0x5e, 0xb8, 0x00,
	0x48, 0x5b, 0x12, 0xc4, 0x32, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x5d, 0xb5, 0x00,
	0x84, 0x00, 0x00, 0x00,
}
